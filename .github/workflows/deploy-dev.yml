name: Development Deployment Pipeline

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: dev-backend
  REGION: europe-west1
  DB_INSTANCE: ${{ secrets.DB_INSTANCE_DEV }}
  DB_USER: "postgres"
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: "sportconnect"
  CLOUD_SQL_PROXY_VERSION: v2.1.2
  LOG_LEVEL: DEBUG

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Bandit
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install bandit

    - name: Run Bandit security scan
      id: bandit
      continue-on-error: true
      run: |
        source venv/bin/activate
        bandit -r . -f json -o bandit-results.json -ll -ii -x "venv/*,*/venv/*,*/site-packages/*,*/dist-packages/*"
        echo "Scan completed. Results saved to bandit-results.json"

    - name: Convert to SARIF format
      run: |
        # Create SARIF structure
        cat > sarif-results.json << EOF
        {
          "version": "2.1.0",
          "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "Bandit",
                  "version": "1.8.3",
                  "informationUri": "https://bandit.readthedocs.io/"
                }
              },
              "results": []
            }
          ]
        }
        EOF

        # Convert Bandit results to SARIF format if issues were found
        if [ -f bandit-results.json ]; then
          jq -r '.results[] | {
            "ruleId": "BANDIT-\(.test_id)",
            "level": (if .issue_severity == "HIGH" then "error" elif .issue_severity == "MEDIUM" then "warning" else "note" end),
            "message": {
              "text": .issue_text
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": .filename
                  },
                  "region": {
                    "startLine": .line_number
                  }
                }
              }
            ]
          }' bandit-results.json | jq -s '{
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "Bandit",
                  "version": "1.8.3",
                  "informationUri": "https://bandit.readthedocs.io/"
                }
              },
              "results": .
            }]
          }' > sarif-results.json
        fi

    - name: Check Bandit results
      if: steps.bandit.outcome == 'failure'
      run: |
        if [ -f bandit-results.json ]; then
          echo "Security issues found. Review the results below:"
          jq -r '.results[] | "File: \(.filename)\nIssue: \(.issue_text)\nSeverity: \(.issue_severity)\nConfidence: \(.issue_confidence)\nLine: \(.line_number)\n"' bandit-results.json
          exit 1
        else
          echo "No security issues found"
        fi

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: sarif-results.json

  test:
    name: Run Tests and Quality Checks
    needs: security-scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Run linting
      run: |
        source venv/bin/activate
        flake8 . --exclude=venv --max-line-length=120 --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --exclude=venv --max-line-length=120 --count --exit-zero --statistics

    - name: Run tests with coverage
      run: |
        source venv/bin/activate
        python -m pytest --cov=. --cov-report=term-missing

  build-and-deploy:
    name: Build and Deploy
    needs: [security-scan, test]
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        token_format: 'access_token'
        create_credentials_file: true

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build and Push Container
      run: |
        # Build the container
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
        
        # Push both tags
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --set-env-vars="FLASK_ENV=development,FLASK_DEBUG=true,LOG_LEVEL=${{ env.LOG_LEVEL }}" \
          --set-secrets="DB_PASSWORD=db-credentials:password,JWT_SECRET_KEY=jwt-secret:secret" \
          --add-cloudsql-instances ${{ env.DB_INSTANCE }} \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 1 \
          --max-instances 5 \
          --port 8080 \
          --concurrency 40 \
          --timeout 300s \
          --cpu-throttling \
          --execution-environment gen2

    - name: Verify Deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        
        # Test the service
        curl -f $SERVICE_URL/sport/ || exit 1

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Development deployment completed successfully"
          echo "Service URL: $SERVICE_URL"
          echo "Deployment Version: ${{ github.sha }}"
          echo "View logs: https://console.cloud.google.com/run/detail/${{ env.REGION }}/${{ env.SERVICE_NAME }}/logs?project=${{ env.PROJECT_ID }}"
        else
          echo "❌ Development deployment failed"
          echo "Check the logs for more details: https://console.cloud.google.com/run/detail/${{ env.REGION }}/${{ env.SERVICE_NAME }}/logs?project=${{ env.PROJECT_ID }}"
          exit 1
        fi 