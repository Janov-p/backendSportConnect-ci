name: CI/CD Flask + Postgres

on:
  push:
    branches: [ "master" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: |
          docker build -t my-flask-app .

      - name: Launch with Docker Compose
        env:
          # Secrets et variables (doivent correspondre à docker-compose.yml)
          DB_USER: postgres
          DB_PASSWORD: admin
          DB_NAME: sportConnectBack
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  # Ajouté pour cohérence
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}  # Ajouté pour cohérence
        run: |
          docker compose up -d
          sleep 15  # Attendre que les services soient prêts

      - name: Verify environment
        run: |
          echo "=== Variables dans Flask ==="
          docker exec flask-app sh -c 'env | grep -E "DB_|SECRET_"'
          
          echo "=== Test de connexion DB depuis Flask ==="
          docker exec flask-app python -c "
          import os;
          print(f\"DB: {os.getenv('DB_USER')}@{os.getenv('DB_HOST')}:5432/{os.getenv('DB_NAME')}\")
          "

      - name: Test API endpoint
        run: |
          curl -v http://localhost:5000/sport

      - name: Cleanup
        if: always()
        run: |
          docker compose down
          docker volume rm $(docker volume ls -q)