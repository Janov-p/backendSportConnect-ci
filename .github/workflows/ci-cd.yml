name: CI/CD Flask + Postgres

on:
  push:
    branches: [ "master" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: |
          docker build -t my-flask-app .

      - name: Launch with Docker Compose
        env:
          DB_USER: postgres
          DB_PASSWORD: admin
          DB_NAME: sportConnectBack
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          # Démarrer en mode détaché mais capturer les logs
          docker compose up -d
          
          # Attendre que le conteneur Flask soit healthy
          timeout 60 bash -c 'until docker inspect flask-app --format "{{.State.Health.Status}}" | grep healthy; do sleep 3; done' || \
          (docker logs flask-app && exit 1)
          
          # Afficher les logs initiaux pour debug
          docker logs flask-app

      - name: Verify environment
        run: |
          echo "=== Variables dans Flask ==="
          docker exec flask-app sh -c 'env | grep -E "DB_|SECRET_|JWT"'
          
          echo "=== Test de connexion DB ==="
          docker exec flask-app python -c "
          import os;
          print(f\"Connexion à : postgresql://{os.getenv('DB_USER')}:****@{os.getenv('DB_HOST')}:5432/{os.getenv('DB_NAME')}\")
          "

      - name: Test API endpoint
        run: |
          curl -v http://localhost:5000/sport/
      - name: Cleanup
        if: always()
        run: |
          docker compose down -v  

      # Nouvelle étape de déploiement
      - name: Deploy to EC2
        if: success() && github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Se déplacer dans le répertoire du projet (créez-le s'il n'existe pas)
            mkdir -p ~/app
            cd ~/app

            # Récupérer le code le plus récent
            git pull origin master || git clone https://github.com/YOUR_USERNAME/YOUR_REPO.git .

            # Configuration des variables d'environnement dans un fichier .env
            cat > .env << EOL
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            EOL

            # Arrêter et redémarrer les services
            docker compose down
            docker compose up -d

            # Vérifier que tout fonctionne
            sleep 10
            curl http://localhost:5000/sport/

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v