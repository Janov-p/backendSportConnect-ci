name: CI/CD Flask + Postgres

on:
  push:
    branches: [ "master" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: sportConnectBack
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic syntax check
      run: |
        python -m py_compile run.py

    - name: Build Docker image
      run: |
        docker build -t my-flask-app .

    - name: Set environment variables
      run: |
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=admin" >> $GITHUB_ENV
        echo "DB_NAME=sportConnectBack" >> $GITHUB_ENV

    - name: Run docker compose
      run: |
        docker compose up -d
        sleep 20  # Allow time for the application to fully start

    - name: Test /sport API endpoint
      run: |
        # Attempt to connect to the API endpoint with retry logic
        MAX_RETRIES=5
        RETRY_DELAY=3
        
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Test attempt $i of $MAX_RETRIES for /sport endpoint..."
          
          HTTP_STATUS=$(curl -s -o response.json -w "%{http_code}" http://localhost:5000/sport)
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ API test succeeded! Response:"
            cat response.json
            break
          else
            echo "❌ API test failed with status code: $HTTP_STATUS"
            if [ $i -lt $MAX_RETRIES ]; then
              echo "Retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            else
              echo "API test failed after $MAX_RETRIES attempts"
              exit 1
            fi
          fi
        done

    - name: Shutdown docker compose
      run: |
        docker compose down
      if: always()  # Ensure this step runs even if previous steps fail